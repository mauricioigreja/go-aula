openapi: 3.0.3
info:
  title: Swagger Pedidos - OpenAPI 3.0
  description: |-
    Pedidos
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:9090
tags:
  - name: product
    description: Everything about your Products
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Productstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: tag
    description: Access to Tag Cruds
    externalDocs:
      description: Find out more about our tags
      url: http://swagger.io
paths:
  /tag:
    put:
      tags:
        - tag
      summary: Update an existing tag
      description: Update an existing tag by Id
      operationId: updateTag
      requestBody:
        description: Update an existent tag in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tag not found
        '405':
          description: Validation exception
    post:
      tags:
        - tag
      summary: Add a new tag to the store
      description: Add a new tag to the store
      operationId: addTag
      requestBody:
        description: Create a new tag in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '405':
          description: Invalid input
  /tag/{tagId}:
    get:
      tags:
        - tag
      summary: Find tag by ID
      description: Returns a single product
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:
      tags:
        - tag
      summary: Delete tag by ID
      description: Delete tag
      operationId: deleteTag
      parameters:
        - name: tagId
          in: path
          description: ID of the tag that needs to be deleted
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Tag not found
  /tag/getAll:
    get:
      tags:
        - tag
      summary: Finds Tags
      description: Find tags.
      operationId: findTags
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /category:
    put:
      tags:
        - category
      summary: Update an existing category
      description: Update an existing category by Id
      operationId: updateCategory
      requestBody:
        description: Update an existent category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '405':
          description: Validation exception
    post:
      tags:
        - category
      summary: Add a new category to the store
      description: Add a new category to the store
      operationId: addCategory
      requestBody:
        description: Create a new category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '405':
          description: Invalid input
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Find category by ID
      description: Returns a single product
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:
      tags:
        - category
      summary: Delete category by ID
      description: Delete category
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the category that needs to be deleted
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
  /category/getAll:
    get:
      tags:
        - category
      summary: Finds Categorys
      description: Find categorys.
      operationId: findCategorys
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /product:
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '405':
          description: Validation exception
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
  /product/findByStatus:
    get:
      tags:
        - product
      summary: Finds Products by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findProductsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
  /product/findByTags:
    get:
      tags:
        - product
      summary: Finds Products by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findProductsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid tag value
  /product/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    post:
      tags:
        - product
      summary: Updates a product in the store with form data
      description: ''
      operationId: updateProductWithForm
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: uint
        - name: name
          in: query
          description: Name of product that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of product that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '400':
          description: Invalid product value
  /product/{productId}/uploadImage:
    post:
      tags:
        - product
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: productId
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: uint
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns product inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a product
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    CustomerOrders:
      type: object
      properties:
        order:
          type: object
          xml:
            name: order
            wrapped: true
          items:
            $ref: '#/components/schemas/Order'
        customer:
          type: object
          xml:
            name: customer
            wrapped: true
          items:
            $ref: '#/components/schemas/Customer'
    OrderItem:
      type: object
      properties:
        productId:
          type: integer
          format: uint
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
    Order:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 10
        items:
          type: array
          xml:
            name: items
            wrapped: true
          items:
            $ref: '#/components/schemas/OrderItem'
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 100000
        fullname:
          type: string
          example: Mauricio de Souza
        phone:
          type: string
          example: xx - xxxxx-xxxx
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        neighborhood:
          type: string
          example: Santa Catarina
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
        default:
          type: boolean
          example: 'false'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: uint
        name:
          type: string
      xml:
        name: tag
    Product:
      required:
        - name
        - available_quantity
        - cost_price
        - sell_price
        - status
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 10
        name:
          type: string
          example: Bananada
        description:
          type: string
          example: A bananada é feita de banana
        available_quantity:
          type: integer
          format: int32
          example: 10
        cost_price:
          type: number
          format: double
          example: 10.10
        sell_price:
          type: number
          format: double
          example: 10.10
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: product status in the store
          enum:
            - available
            - pending
      xml:
        name: product
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'